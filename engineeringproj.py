# -*- coding: utf-8 -*-
"""Engineeringproj.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1gpgsasP-nzdMUZO3FypdzZ-rtSwD2r-O
"""

import numpy as np
import matplotlib.pyplot as plt
import random

class Microorganism:
    def __init__(self, name, organism_type, health):
        self.name = name
        self.type = organism_type
        self.health = health
        self.position = (random.uniform(0, 10), random.uniform(0, 10))  # Random position in a 10x10 area

    def interact(self, other):
        # Interaction logic with randomness
        if self.type == 'good_bacteria' and other.type == 'bad_bacteria':
            # Good bacteria can reduce the health of bad bacteria
            damage = 0.1 * other.health * random.uniform(0.5, 1.5)  # Randomized damage
            other.health -= damage
        elif self.type == 'bad_bacteria' and other.type == 'good_bacteria':
            # Bad bacteria can reduce the health of good bacteria
            damage = 0.1 * other.health * random.uniform(0.5, 1.5)  # Randomized damage
            other.health -= damage
        elif self.type == 'good_bacteria' and other.type == 'virus':
            damage = 0.1 * other.health * random.uniform(0.5, 1.5)  # Randomized damage
            self.health -= damage
        elif self.type == 'fungi' and other.type == 'good_bacteria':
            recovery = 0.05 * other.health * random.uniform(0.5, 1.5)  # Randomized recovery
            self.health += recovery
        elif self.type == 'fungi' and other.type == 'bad_bacteria':
            damage = 0.05 * other.health * random.uniform(0.5, 1.5)  # Randomized damage
            self.health -= damage

        # Ensure health does not drop below zero
        self.health = max(self.health, 0)

    def is_healthy(self):
        if self.type == "good_bacteria":
            return self.health > 0.1
        return self.health > 0.3

class MicrobiomeSimulation:
    def __init__(self, num_bacteria, num_viruses, num_fungi, num_iterations, digestion_rate, healthy_bacteria_ratio):
        self.num_bacteria = num_bacteria
        self.num_viruses = num_viruses
        self.num_fungi = num_fungi
        self.num_iterations = num_iterations
        self.digestion_rate = digestion_rate
        self.healthy_bacteria_ratio = healthy_bacteria_ratio
        self.microorganisms_list = self.initialize_microorganisms()

    def initialize_microorganisms(self):
        microorganisms = []
        num_good_bacteria = int(self.num_bacteria * self.healthy_bacteria_ratio)
        num_bad_bacteria = self.num_bacteria - num_good_bacteria

        # Initialize good bacteria
        for index in range(num_good_bacteria):
            microorganisms.append(Microorganism(f'GoodBacteria_{index}', 'good_bacteria', random.uniform(0.5, 1.0)))

        # Initialize bad bacteria
        for index in range(num_bad_bacteria):
            microorganisms.append(Microorganism(f'BadBacteria_{index}', 'bad_bacteria', random.uniform(0.1, 0.5)))

        # Initialize viruses
        for index in range(self.num_viruses):
            microorganisms.append(Microorganism(f'Virus_{index}', 'virus', random.uniform(0.1, 0.5)))

        # Initialize fungi
        for index in range(self.num_fungi):
            microorganisms.append(Microorganism(f'Fungi_{index}', 'fungi', random.uniform(0.5, 1.0)))

        return microorganisms

    def simulate(self):
        healthy_bacteria_counts = []
        for iteration in range(self.num_iterations):
            for i in range(len(self.microorganisms_list)):
                for j in range(len(self.microorganisms_list)):
                    if i != j:
                        self.microorganisms_list[i].interact(self.microorganisms_list[j])
            healthy_count = sum(1 for m in self.microorganisms_list if m.type == 'good_bacteria' and m.is_healthy())
            healthy_bacteria_counts.append(healthy_count)
            for m in self.microorganisms_list:
                if m.type == 'good_bacteria':
                    m.health -= self.digestion_rate * (1 - self.healthy_bacteria_ratio)
                    # Introduce a small chance for healthy good bacteria to recover health
                    if m.is_healthy() and random.random() < 0.5:  # 10% chance to recover
                        m.health += 0.05  # Small recovery
                    m.health = min(m.health, 1.0)  # Cap health at 1.0
        return healthy_bacteria_counts

    def visualize_microbiome(self):
        plt.figure(figsize=(10, 10))
        for m in self.microorganisms_list:
            x, y = m.position
            if m.type == 'good_bacteria':
                plt.scatter(x, y, color='blue', s=100, label='Good Bacteria' if 'Good Bacteria' not in plt.gca().get_legend_handles_labels()[1] else "")
            elif m.type == 'bad_bacteria':
                plt.scatter(x, y, color='orange', s=100, label='Bad Bacteria' if 'Bad Bacteria' not in plt.gca().get_legend_handles_labels()[1] else "")
            elif m.type == 'virus':
                plt.scatter(x, y, color='red', s=100, label='Virus' if 'Virus' not in plt.gca().get_legend_handles_labels()[1] else "")
            elif m.type == 'fungi':
                plt.scatter(x, y, color='green', s=100, label='Fungi' if 'Fungi' not in plt.gca().get_legend_handles_labels()[1] else "")

        plt.title('Gut Microbiome Visualization')
        plt.xlabel('X Position')
        plt.ylabel('Y Position')
        plt.xlim(0, 10)
        plt.ylim(0, 10)
        plt.legend()
        plt.grid()
        plt.show()

def plot_results(healthy_bacteria_count_list):
    plt.plot(healthy_bacteria_count_list)
    plt.title('Healthy Good Bacteria Count Over Time')
    plt.xlabel('Iteration')
    plt.ylabel('Healthy Good Bacteria Count')
    plt.grid()
    plt.show()

num_bacteria = int(input("Enter the total number of bacteria: "))
num_viruses = int(input("Enter the number of viruses: "))
num_fungi = int(input("Enter the number of fungi: "))
num_iterations = int(input("Enter the number of iterations: "))
healthy_bacteria_ratio = float(input("Enter the ratio of good/bad * 100 bacteria (normal number is 0.85)"))
digestion_rate = 0.1


simulation = MicrobiomeSimulation(num_bacteria, num_viruses, num_fungi, num_iterations, digestion_rate, healthy_bacteria_ratio)
healthy_bacteria_count_list = simulation.simulate()
plot_results(healthy_bacteria_count_list)
simulation.visualize_microbiome()

health_conditions = {
    "Diversity of Microbiota": "A diverse range of microorganisms promotes resilience and functionality in the gut.",
    "Balanced Diet": "A diet rich in fruits, vegetables, whole grains, and lean proteins supports gut health.",
    "Fermented Foods": "Inclusion of fermented foods (e.g., yogurt, kefir, sauerkraut) introduces beneficial probiotics.",
    "Prebiotics": "Consumption of prebiotic foods (e.g., garlic, onions, bananas) nourishes healthy gut bacteria.",
    "Hydration": "Adequate water intake is essential for digestion and maintaining mucosal lining in the gut.",
    "Regular Physical Activity": "Exercise promotes gut motility and can positively influence the composition of gut microbiota.",
    "Stress Management": "Chronic stress can negatively impact gut health; practices like meditation and yoga can help.",
    "Adequate Sleep": "Quality sleep is crucial for overall health, including the health of the gut microbiome.",
    "Limit Processed Foods": "Reducing intake of processed foods and sugars can help maintain a healthy microbiome.",
    "Avoiding Antibiotics When Possible": "Overuse of antibiotics can disrupt the balance of gut bacteria; use them only when necessary.",
    "Moderate Alcohol Consumption": "Excessive alcohol can harm gut health; moderation is key.",
    "Smoking Cessation": "Smoking negatively affects gut microbiota and overall health; quitting can improve gut health."
}

print("Recommendations for Improving Gut Health:")
for condition, description in health_conditions.items():
    print(f"{condition}: {description}")